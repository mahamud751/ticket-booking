// National Bus Ticketing System Database Schema
// Comprehensive schema for managing routes, schedules, bookings, and users

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  OPERATOR
}

// Location and Route Management
model City {
  id               String  @id @default(cuid())
  name             String  @unique
  state            String
  country          String  @default("Bangladesh")
  code             String  @unique // DHK, CTG, etc.
  isActive         Boolean @default(true)
  originRoutes     Route[] @relation("OriginCity")
  destinationRoutes Route[] @relation("DestinationCity")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Operator {
  id          String    @id @default(cuid())
  name        String    @unique
  contactInfo String?
  isActive    Boolean   @default(true)
  routes      Route[]
  buses       Bus[]
  schedules   Schedule[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Route {
  id            String     @id @default(cuid())
  operatorId    String
  originId      String
  destinationId String
  distance      Float      // in kilometers
  duration      Int        // in minutes
  isActive      Boolean    @default(true)
  operator      Operator   @relation(fields: [operatorId], references: [id])
  origin        City       @relation("OriginCity", fields: [originId], references: [id])
  destination   City       @relation("DestinationCity", fields: [destinationId], references: [id])
  schedules     Schedule[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([operatorId, originId, destinationId])
}

// Bus and Schedule Management
model Bus {
  id           String     @id @default(cuid())
  operatorId   String
  busNumber    String     @unique
  busType      BusType
  totalSeats   Int
  amenities    String[]   // ["AC", "WiFi", "USB_Charging", "Restroom"]
  isActive     Boolean    @default(true)
  operator     Operator   @relation(fields: [operatorId], references: [id])
  schedules    Schedule[]
  seatLayout   SeatLayout[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model SeatLayout {
  id          String   @id @default(cuid())
  busId       String
  seatNumber  String   // "1A", "1B", "2A", etc.
  seatType    SeatType @default(REGULAR)
  isAvailable Boolean  @default(true)
  bus         Bus      @relation(fields: [busId], references: [id])
  bookings    BookingSeat[]
  passengers  BookingPassenger[]
  locks       SeatLock[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([busId, seatNumber])
}

model Schedule {
  id            String        @id @default(cuid())
  routeId       String
  busId         String
  operatorId    String
  departureTime DateTime
  arrivalTime   DateTime
  basePrice     Float
  isActive      Boolean       @default(true)
  route         Route         @relation(fields: [routeId], references: [id])
  bus           Bus           @relation(fields: [busId], references: [id])
  operator      Operator      @relation(fields: [operatorId], references: [id])
  bookings      Booking[]
  pricingTiers  PricingTier[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([routeId, busId, departureTime])
}

model PricingTier {
  id         String   @id @default(cuid())
  scheduleId String
  seatType   SeatType
  price      Float
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([scheduleId, seatType])
}

// Booking and Payment Management
model Booking {
  id               String             @id @default(cuid())
  pnr              String             @unique
  userId           String?            // Made optional for guest bookings
  scheduleId       String
  passengerName    String
  passengerPhone   String
  passengerEmail   String
  totalAmount      Float
  discountCode     String?
  discountAmount   Float              @default(0)
  status           BookingStatus      @default(PENDING)
  paymentStatus    PaymentStatus      @default(PENDING)
  paymentIntentId  String?
  bookingDate      DateTime           @default(now())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User?              @relation(fields: [userId], references: [id])
  schedule         Schedule           @relation(fields: [scheduleId], references: [id])
  seats            BookingSeat[]
  passengers       BookingPassenger[]
  payments         Payment[]
}

model BookingSeat {
  id           String     @id @default(cuid())
  bookingId    String
  seatLayoutId String
  price        Float
  booking      Booking    @relation(fields: [bookingId], references: [id])
  seat         SeatLayout @relation(fields: [seatLayoutId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([bookingId, seatLayoutId])
}

model BookingPassenger {
  id           String     @id @default(cuid())
  bookingId    String
  seatLayoutId String
  passengerName String
  booking      Booking    @relation(fields: [bookingId], references: [id])
  seat         SeatLayout @relation(fields: [seatLayoutId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([bookingId, seatLayoutId])
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  amount          Float
  currency        String        @default("USD")
  paymentMethod   String        // "stripe", "card", etc.
  transactionId   String?       @unique
  status          PaymentStatus @default(PENDING)
  processedAt     DateTime?
  booking         Booking       @relation(fields: [bookingId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Real-time Seat Locking
model SeatLock {
  id           String     @id @default(cuid())
  seatLayoutId String
  userId       String?
  sessionId    String     // For anonymous users
  expiresAt    DateTime
  seat         SeatLayout @relation(fields: [seatLayoutId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([seatLayoutId])
  @@index([expiresAt])
}

// Analytics and Reporting
model BookingAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  operatorId  String
  routeId     String
  totalBookings Int    @default(0)
  totalRevenue  Float  @default(0)
  occupancyRate Float  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, operatorId, routeId])
}

// Enums
enum BusType {
  AC
  NON_AC
  SLEEPER
  SEMI_SLEEPER
  LUXURY
}

enum SeatType {
  REGULAR
  PREMIUM
  SLEEPER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
